wordCountJob {

  input {
    topic: "price-update-event"
  }

  output {
    topic: "test-output"
  }




  stopWords: ["a", "an", "the"]

  windowDuration: 30s

  slideDuration: 5s

  spark {
    "spark.master": "local[*]"
    "spark.app.name": "enricher"
    "spark.serializer": "org.apache.spark.serializer.KryoSerializer"
    "spark.kryo.registrator": "example.WordCountKryoRegistration"
  }

  streamingBatchDuration: 5s
  streamingCheckpointDir: ${java.io.tmpdir}

  kafkaSource {
    // kafka brokers
    "metadata.broker.list": "10.33.97.199:9092,10.33.10.211:9092,10.33.89.206:9092,10.33.77.166:9092,10.33.37.218:9092,10.33.49.208:9092"
    // start from the latest messages (at most once)
    "auto.offset.reset": "largest"
  }

  kafkaSink {
    // kafka bootstrap
    "bootstrap.servers": "10.33.205.205:6667,10.33.249.164:6667"
    // ack from all in-sync replicas
    "acks": "all"
    // reduce buffer size from default 32M to 8M
    "buffer.memory": "8388608"
    // block if buffer is full
    "block.on.buffer.full": "true"
    // retry forever
    "retries": "2147483647"
    "retry.backoff.ms": "1500"
  }
}
